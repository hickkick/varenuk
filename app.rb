require 'sinatra'
set :protection, except: :host_authorization
require 'telegram/bot'
require 'json'
require 'dotenv/load'
require 'logger'

set :bind, '0.0.0.0'
set :port, ENV['PORT'] || 4567

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = ENV['LOG_FILE'] || 'bot.log'
logger = Logger.new(LOG_FILE)
logger.level = Logger::INFO
logger.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime.strftime('%Y-%m-%d %H:%M:%S')} [#{severity}] #{msg}\n"
end

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
BOT_TOKEN = ENV['BOT_TOKEN']
ADMIN_CHAT_ID = ENV['ADMIN_CHAT_ID']
MAX_RETRIES = 3
RETRY_DELAY = 5
$user_sessions = {}

# –ú–æ–≤–∏
LANGUAGES = {
  'uk' => {
    name: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    welcome: '–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
    menu_title: 'üìã –ù–∞—à–µ –º–µ–Ω—é:',
    cart_title: 'üõí –í–∞—à –∫–æ—à–∏–∫:',
    cart_empty: '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π',
    add_to_cart: '–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!',
    remove_from_cart: '–í–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞!',
    order_button: 'üõí –ö–æ—à–∏–∫',
    back_button: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
    clear_cart: 'üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫',
    make_order: 'üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    enter_phone: '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:',
    enter_address: '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:',
    order_summary: "üìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n",
    total: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ',
    phone: '–¢–µ–ª–µ—Ñ–æ–Ω: ',
    address: '–ê–¥—Ä–µ—Å–∞: ',
    confirm_order: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    order_sent: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.',
    new_order: '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    share_phone: 'üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º',
    error_occurred: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.',
    delivery: '–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏'
  },
  'pl' => {
    name: 'üáµüá± Polski',
    welcome: 'Witamy! Wybierz jƒôzyk:',
    menu_title: 'üìã Nasze menu:',
    cart_title: 'üõí Tw√≥j koszyk:',
    cart_empty: 'Koszyk jest pusty',
    add_to_cart: 'Dodano do koszyka!',
    remove_from_cart: 'Usuniƒôto z koszyka!',
    order_button: 'üõí Koszyk',
    back_button: '‚¨ÖÔ∏è Wstecz',
    clear_cart: 'üóë Wyczy≈õƒá koszyk',
    make_order: 'üìù Z≈Ç√≥≈º zam√≥wienie',
    enter_phone: 'Wprowad≈∫ numer telefonu:',
    enter_address: 'Wprowad≈∫ adres dostawy:',
    order_summary: "üìã Potwierdzenie zam√≥wienia:\n\n",
    total: 'Suma ca≈Çkowita: ',
    phone: 'Telefon: ',
    address: 'Adres: ',
    confirm_order: '‚úÖ Potwierd≈∫ zam√≥wienie',
    order_sent: 'Zam√≥wienie wys≈Çane! Oczekuj na telefon.',
    new_order: 'Nowe zam√≥wienie',
    share_phone: 'üì± Udostƒôpnij numer',
    error_occurred: 'WystƒÖpi≈Ç b≈ÇƒÖd. Spr√≥buj ponownie lub skontaktuj siƒô z pomocƒÖ.',
    delivery: 'Koszt dostawy'
  },
  'en' => {
    name: 'üá¨üáß English',
    welcome: 'Welcome! Choose language:',
    menu_title: 'üìã Our menu:',
    cart_title: 'üõí Your cart:',
    cart_empty: 'Cart is empty',
    add_to_cart: 'Added to cart!',
    remove_from_cart: 'Removed from cart!',
    order_button: 'üõí Cart',
    back_button: '‚¨ÖÔ∏è Back',
    clear_cart: 'üóë Clear cart',
    make_order: 'üìù Place order',
    enter_phone: 'Enter your phone number:',
    enter_address: 'Enter your delivery address:',
    order_summary: "üìã Order confirmation:\n\n",
    total: 'Total amount: ',
    phone: 'Phone: ',
    address: 'Address: ',
    confirm_order: '‚úÖ Confirm order',
    order_sent: 'Order sent! Expect a call.',
    new_order: 'New order',
    share_phone: 'üì± Share phone',
    error_occurred: 'An error occurred. Please try again or contact support.',
    delivery: 'Delivery cost'
  },
  'ru' => {
    name: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    menu_title: 'üìã –ù–∞—à–µ –º–µ–Ω—é:',
    cart_title: 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:',
    cart_empty: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
    add_to_cart: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!',
    remove_from_cart: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!',
    order_button: 'üõí –ö–æ—Ä–∑–∏–Ω–∞',
    back_button: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
    clear_cart: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
    make_order: 'üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
    enter_phone: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
    enter_address: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:',
    order_summary: "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n",
    total: '–û–±—â–∞—è —Å—É–º–º–∞: ',
    phone: '–¢–µ–ª–µ—Ñ–æ–Ω: ',
    address: '–ê–¥—Ä–µ—Å: ',
    confirm_order: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
    order_sent: '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.',
    new_order: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
    share_phone: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
    error_occurred: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    delivery: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏'
  },
  'by' => {
    name: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è',
    welcome: '–í—ñ—Ç–∞–µ–º! –í—ã–±–µ—Ä—ã—Ü–µ –º–æ–≤—É:',
    menu_title: 'üìã –ù–∞—à–∞ –º—ç–Ω—é:',
    cart_title: 'üõí –í–∞—à–∞ –∫–æ—à—ã–∫:',
    cart_empty: '–ö–æ—à—ã–∫ –ø—É—Å—Ç—ã',
    add_to_cart: '–î–∞–¥–∞–¥–∑–µ–Ω–∞ —û –∫–æ—à—ã–∫!',
    remove_from_cart: '–í—ã–¥–∞–ª–µ–Ω–∞ –∑ –∫–æ—à—ã–∫–∞!',
    order_button: 'üõí –ö–æ—à—ã–∫',
    back_button: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
    clear_cart: 'üóë –ê—á—ã—Å—Ü—ñ—Ü—å –∫–æ—à—ã–∫',
    make_order: 'üìù –ê—Ñ–æ—Ä–º—ñ—Ü—å –∑–∞–º–æ–≤—É',
    enter_phone: '–£–≤—è–¥–∑—ñ—Ü–µ –Ω—É–º–∞—Ä —Ç—ç–ª–µ—Ñ–æ–Ω–∞:',
    enter_address: '–£–≤—è–¥–∑—ñ—Ü–µ –∞–¥—Ä–∞—Å –¥–∞—Å—Ç–∞—û–∫—ñ:',
    order_summary: "üìã –ü–∞—Ü–≤—è—Ä–¥–∂—ç–Ω–Ω–µ –∑–∞–º–æ–≤—ã:\n\n",
    total: '–ê–≥—É–ª—å–Ω–∞—è —Å—É–º–∞: ',
    phone: '–¢—ç–ª–µ—Ñ–æ–Ω: ',
    address: '–ê–¥—Ä–∞—Å: ',
    confirm_order: '‚úÖ –ü–∞—Ü–≤–µ—Ä–¥–∑—ñ—Ü—å –∑–∞–º–æ–≤—É',
    order_sent: '–ó–∞–º–æ–≤–∞ –∞–¥–ø—Ä–∞—û–ª–µ–Ω–∞! –ß–∞–∫–∞–π—Ü–µ –∑–≤–∞–Ω–∫–∞.',
    new_order: '–ù–æ–≤–∞—è –∑–∞–º–æ–≤–∞',
    share_phone: 'üì± –ü–∞–¥–∑—è–ª—ñ—Ü—Ü–∞ –Ω—É–º–∞—Ä–∞–º',
    error_occurred: '–£–∑–Ω—ñ–∫–ª–∞ –ø–∞–º—ã–ª–∫–∞. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —è—à—á—ç —Ä–∞–∑ –∞–±–æ –∑–≤—è—Ä–Ω—ñ—Ü–µ—Å—è —û –ø–∞–¥—Ç—Ä—ã–º–∫—É.',
    delivery: '–ö–æ—à—Ç –¥–∞—Å—Ç–∞—û–∫—ñ'
  }
}


MENU_ITEMS = [
  { id: 1, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –≤–∏—à–Ω–µ—é', name_pl: 'Pierogi z wi≈õniami', name_en: 'Dumplings with cherries', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –≤–∏—à–Ω–µ–π', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ –≤—ñ—à–Ω—è–π', price: 38 },
  { id: 2, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é', name_pl: 'Kluski z ziemniakami', name_en: 'Dumplings with potatoes', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ –±—É–ª—å–±–∞–π', price: 38 },
  { id: 3, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –ø–æ–ª—É–Ω–∏—Ü–µ—é —Ç–∞ –º\'—è—Ç–æ—é', name_pl: 'Pierogi z truskawkami i miƒôtƒÖ', name_en: 'Dumplings with strawberries and mint', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–ª—É–±–Ω–∏–∫–æ–π –∏ –º—è—Ç–æ–π', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ —Ç—Ä—É—Å–∫–∞—û–∫–∞–π —ñ –º—è—Ç–∞–π', price: 38 },
  { id: 4, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ —Å–æ–ª–æ–¥–∫–∏–º —Ç–≤–æ—Ä–æ–≥–æ–º', name_pl: 'Pierogi z serem na s≈Çodko', name_en: 'Dumplings with sweet cottage cheese', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å–æ —Å–ª–∞–¥–∫–∏–º —Ç–≤–æ—Ä–æ–≥–æ–º', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ —Å–∞–ª–æ–¥–∫—ñ–º —Ç–≤–∞—Ä–∞–≥–æ–º', price: 38 },
  { id: 5, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ —Å–æ–ª–æ–Ω–∏–º —Ç–≤–æ—Ä–æ–≥–æ–º', name_pl: 'Pierogi z serem solonym', name_en: 'Dumplings with salted cottage cheese', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å —Å–æ–ª–µ–Ω—ã–º —Ç–≤–æ—Ä–æ–≥–æ–º', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ —Å–∞–ª—ë–Ω—ã–º —Ç–≤–∞—Ä–∞–≥–æ–º', price: 38 },
  { id: 6, name_uk: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é —Ç–∞ –º\'—è—Ç–æ—é', name_pl: 'Pierogi z cielƒôcinƒÖ i miƒôtƒÖ', name_en: 'Dumplings with veal and mint', name_ru: '–í–∞—Ä–µ–Ω–∏–∫–∏ —Å —Ç–µ–ª—è—Ç–∏–Ω–æ–π –∏ –º—è—Ç–æ–π', name_by: '–í–∞—Ä—ç–Ω—ñ–∫—ñ –∑ —Ü—è–ª—è—Ü—ñ–Ω–∞–π —ñ –º—è—Ç–∞–π', price: 38 },
  { id: 7, name_uk: '–ü–µ–ª—å–º–µ–Ω—ñ –∑—ñ —Å–≤–∏–Ω–∏–Ω–æ—é', name_pl: 'Pielmieni z wieprzowinƒÖ', name_en: 'Pork dumplings', name_ru: '–ü–µ–ª—å–º–µ–Ω–∏ —Å–æ —Å–≤–∏–Ω–∏–Ω–æ–π', name_by: '–ü–µ–ª—å–º–µ–Ω—ñ —Å–∞ —Å–≤—ñ–Ω—ñ–Ω—ã', price: 38 }
]

def get_user_session(user_id)
    $user_sessions[user_id] ||= { language: nil, cart: [], state: :start, phone: nil, address: nil }
end
  
def get_text(user_id, key)
    session = get_user_session(user_id)
    lang = session[:language] || 'uk'
    LANGUAGES[lang][key]
end
  
def get_menu_item_name(item, language)
    case language
    when 'uk' then item[:name_uk]
    when 'pl' then item[:name_pl]
    when 'en' then item[:name_en]
    when 'ru' then item[:name_ru]
    when 'by' then item[:name_by]
    else item[:name_en]
    end
end
  
  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
  def language_selection_keyboard
    kb = LANGUAGES.map do |code, lang|
      [Telegram::Bot::Types::InlineKeyboardButton.new(text: lang[:name], callback_data: "lang_#{code}")]
    end
    Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
  end
  
  def main_menu_keyboard(user_id)
    lang = get_user_session(user_id)[:language]
    kb = MENU_ITEMS.map do |item|
      [Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{get_menu_item_name(item, lang)} - #{item[:price]}‚Ç¥",
        callback_data: "add_#{item[:id]}"
      )]
    end
    kb << [Telegram::Bot::Types::InlineKeyboardButton.new(text: get_text(user_id, :order_button), callback_data: "cart")]
    kb << [Telegram::Bot::Types::InlineKeyboardButton.new(text: "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", callback_data: "change_language")]
    Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
  end
  
  def cart_keyboard(user_id)
    kb = []
    session = get_user_session(user_id)
    lang = session[:language]
    session[:cart].each do |item_id|
      item = MENU_ITEMS.find { |i| i[:id] == item_id }
      kb << [Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "‚ùå #{get_menu_item_name(item, lang)}",
        callback_data: "remove_#{item_id}"
      )]
    end
    kb << [Telegram::Bot::Types::InlineKeyboardButton.new(text: get_text(user_id, :make_order), callback_data: "make_order")] unless session[:cart].empty?
    kb << [Telegram::Bot::Types::InlineKeyboardButton.new(text: get_text(user_id, :clear_cart), callback_data: "clear_cart")]
    kb << [Telegram::Bot::Types::InlineKeyboardButton.new(text: get_text(user_id, :back_button), callback_data: "back_to_menu")]
    Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
  end
  
  def phone_request_keyboard(user_id)
    kb = [
      [Telegram::Bot::Types::KeyboardButton.new(text: get_text(user_id, :share_phone), request_contact: true)]
    ]
    Telegram::Bot::Types::ReplyKeyboardMarkup.new(keyboard: kb, resize_keyboard: true, one_time_keyboard: true)
  end
  
  def order_confirmation_keyboard(user_id)
    kb = [
      [Telegram::Bot::Types::InlineKeyboardButton.new(text: get_text(user_id, :confirm_order), callback_data: "confirm_order")]
    ]
    Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
  end
  
  def format_cart(user_id)
    session = get_user_session(user_id)
    lang = session[:language]
    text = ""
    total = 0
    session[:cart].each do |item_id|
      item = MENU_ITEMS.find { |i| i[:id] == item_id }
      text += "#{get_menu_item_name(item, lang)} - #{item[:price]}‚Ç¥\n"
      total += item[:price]
    end
    text = get_text(user_id, :cart_empty) if text.empty?
    text += "\n#{get_text(user_id, :total)} #{total}‚Ç¥" unless total.zero?
    text
  end
  

post '/webhook' do
  request_data = JSON.parse(request.body.read)
  logger.info("Received update: #{request_data}")

  if request_data['message']
    handle_message(request_data['message'])
  elsif request_data['callback_query']
    handle_callback(request_data['callback_query'])
  end

  status 200
  end

def handle_message(message)
  user_id = message['from']['id']
  session = get_user_session(user_id)

  if message['contact']
    session[:phone] = message['contact']['phone_number']
    send_message(user_id, get_text(user_id, :enter_address))
    session[:state] = :waiting_for_address
  elsif session[:state] == :waiting_for_address
    session[:address] = message['text']
    send_order_summary(user_id)
  else
    send_message(user_id, get_text(user_id, :welcome), language_selection_keyboard)
  end
end

def handle_callback(callback)
  user_id = callback['from']['id']
  data = callback['data']
  session = get_user_session(user_id)

  if data.start_with?('lang_')
    session[:language] = data.split('_')[1]
    send_message(user_id, get_text(user_id, :menu_title), main_menu_keyboard(user_id))
  elsif data.start_with?('add_')
    session[:cart] << data.split('_')[1].to_i
    answer_callback(callback['id'], get_text(user_id, :add_to_cart))
  elsif data.start_with?('remove_')
    item_id = data.split('_')[1].to_i
    session[:cart].delete_at(session[:cart].index(item_id) || session[:cart].length)
    send_message(user_id, format_cart(user_id), cart_keyboard(user_id))
  elsif data == 'cart'
    send_message(user_id, format_cart(user_id), cart_keyboard(user_id))
  elsif data == 'clear_cart'
    session[:cart].clear
    send_message(user_id, get_text(user_id, :cart_empty), cart_keyboard(user_id))
  elsif data == 'make_order'
    send_message(user_id, get_text(user_id, :enter_phone), phone_request_keyboard(user_id))
  elsif data == 'confirm_order'
    send_message(user_id, get_text(user_id, :order_sent))
    notify_admin(user_id)
    session[:cart].clear
  elsif data == 'back_to_menu'
    send_message(user_id, get_text(user_id, :menu_title), main_menu_keyboard(user_id))
  elsif data == 'change_language'
    send_message(user_id, get_text(user_id, :welcome), language_selection_keyboard)
  else
    answer_callback(callback['id'], "Unknown command")
  end
end

def send_message(chat_id, text, reply_markup = nil)
  Telegram::Bot::Client.run(BOT_TOKEN) do |bot|
    bot.api.send_message(chat_id: chat_id, text: text, reply_markup: reply_markup)
  end
end

def answer_callback(callback_query_id, text)
  Telegram::Bot::Client.run(BOT_TOKEN) do |bot|
    bot.api.answer_callback_query(callback_query_id: callback_query_id, text: text, show_alert: false)
  end
end

def send_order_summary(user_id)
  session = get_user_session(user_id)
  text = get_text(user_id, :order_summary) + format_cart(user_id) + "\n"
  text += "#{get_text(user_id, :phone)} #{session[:phone]}\n"
  text += "#{get_text(user_id, :address)} #{session[:address]}\n"
  send_message(user_id, text, order_confirmation_keyboard(user_id))
end

def notify_admin(user_id)
  session = get_user_session(user_id)
  text = "#{get_text(user_id, :new_order)}\n" + format_cart(user_id) + "\n"
  text += "#{get_text(user_id, :phone)} #{session[:phone]}\n"
  text += "#{get_text(user_id, :address)} #{session[:address]}\n"
  Telegram::Bot::Client.run(BOT_TOKEN) do |bot|
    bot.api.send_message(chat_id: ADMIN_CHAT_ID, text: text)
  end
end